#!/usr/bin/env python
# -*- coding: utf-8 -*-  
import sys
import os
from tinkerforge.ip_connection import IPConnection
from tinkerforge.bricklet_temperature_ir import TemperatureIR

HOST = "localhost"
PORT = 4223

scriptname=os.path.basename(__file__)
measurementtype=scriptname.partition('_')[2].partition('_')[2]
UID = scriptname.partition('_')[2].partition('_')[0]

ipcon = IPConnection() # Create IP connection
tir = TemperatureIR(UID, ipcon) # Create device object
ipcon.connect(HOST, PORT) # Connect to brickd

def cb_enumerate(uid, connected_uid, position, hardware_version, firmware_version,
                 device_identifier, enumeration_type):
    if device_identifier==217:
        print "%s_ambient" % uid
        print "%s_object" % uid

if len(sys.argv) == 2 and sys.argv[1] == "autoconf":
    #Magic markers for munin autoconf
    #%# family=auto
    #%# capabilities=autoconf suggest
    print "yes"

elif len(sys.argv) >= 2 and sys.argv[1] == "suggest":
    ipcon.register_callback(IPConnection.CALLBACK_ENUMERATE, cb_enumerate)
    # Trigger Enumerate
    ipcon.enumerate()

elif len(sys.argv) == 2 and sys.argv[1] == "config":
    print 'graph_title %s' % (scriptname)
    print 'graph_vlabel %s temperature in \'C' %measurementtype
    print 'graph_category tinkerforge'

    print '%s.label value in \'C' % measurementtype
    varname="%s.draw" % measurementtype
    if os.environ.get(varname) is None:
        draw='LINE1'
    else:
        draw=os.environ.get(varname)
    print '%s.draw %s' % (measurementtype,draw)
    varname="%s.type" % measurementtype
    if os.environ.get(varname) is None:
        mtype='GAUGE'
    else:
        mtype=os.environ.get(varname)
    print '%s.type %s' % (measurementtype,mtype)
    for thresholdtype in ["warning","critical"]:
        varname="%s.%s" % (measurementtype,thresholdtype)
        if os.environ.get(varname) is not None:
            print '%s %s' % (varname,os.environ.get(varname)) 

else:
    print '%s.value %s' % (measurementtype,tir.get_object_temperature()/10.0)

ipcon.disconnect()
